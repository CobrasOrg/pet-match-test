#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para probar la generaci√≥n de PDFs de donaci√≥n
Genera un reporte de ejemplo con datos simulados
"""

import os
from datetime import datetime
from pdf_generator import PetMatchDonationPDFGenerator

def test_pdf_generation():
    """Prueba la generaci√≥n de PDFs con datos de ejemplo"""
    
    print("üß™ PROBANDO GENERACI√ìN DE PDF DE DONACIONES")
    print("=" * 50)
    
    # Crear instancia del generador
    pdf_generator = PetMatchDonationPDFGenerator()
    
    # Datos de prueba simulados para donaciones
    test_results = {
        'test_find_donation_request': {
            'success': True,
            'duration': 28,
            'description': 'B√∫squeda y localizaci√≥n de solicitudes de donaci√≥n activas en la plataforma',
            'donation_data': {
                'Mascota Receptora': 'Luna',
                'Veterinaria': 'Cl√≠nica Veterinaria San Patricio',
                'Urgencia': 'URGENCIA ALTA',
                'Solicitud': '#1',
                'Estado': 'Encontrada',
                'Fecha': datetime.now().strftime("%d/%m/%Y %H:%M")
            }
        },
        'test_apply_donation_with_pet': {
            'success': True,
            'duration': 35,
            'description': 'Postulaci√≥n exitosa de mascota como donante de sangre',
            'donation_data': {
                'Mascota Receptora': 'Max',
                'Veterinaria': 'Veterinaria Los Andes',
                'Urgencia': 'URGENCIA MEDIA',
                'Solicitud': '#2',
                'Estado': 'Postulaci√≥n Enviada',
                'Fecha': datetime.now().strftime("%d/%m/%Y %H:%M")
            }
        },
        'test_complete_donation_flow': {
            'success': True,
            'duration': 42,
            'description': 'Flujo completo desde b√∫squeda hasta confirmaci√≥n de donaci√≥n',
            'donation_data': {
                'Mascota Receptora': 'Bella',
                'Veterinaria': 'Hospital Veterinario Central',
                'Urgencia': 'URGENCIA ALTA',
                'Solicitud': '#3',
                'Estado': 'Flujo Completo',
                'Fecha': datetime.now().strftime("%d/%m/%Y %H:%M")
            }
        },
        'test_donation_validation': {
            'success': True,
            'duration': 25,
            'description': 'Validaci√≥n de datos y requisitos para proceso de donaci√≥n',
            'donation_data': {
                'Mascota Receptora': 'Rocky',
                'Veterinaria': 'Cl√≠nica Veterinaria Norte',
                'Urgencia': 'URGENCIA MEDIA',
                'Solicitud': '#4',
                'Estado': 'Validado',
                'Validaciones': '4/4 exitosas',
                'Fecha': datetime.now().strftime("%d/%m/%Y %H:%M")
            }
        }
    }
    
    try:
        # Generar el reporte de resumen
        output_dir = os.path.dirname(__file__)
        pdf_path = pdf_generator.generate_summary_report(test_results, output_dir)
        
        relative_path = os.path.relpath(pdf_path, output_dir)
        print(f"‚úÖ PDF de prueba generado exitosamente: {relative_path}")
        print(f"üìÅ Ubicaci√≥n completa: {pdf_path}")
        print()
        print("üìã Contenido del reporte:")
        print("   ‚Ä¢ Encabezado universitario con logo")
        print("   ‚Ä¢ Informaci√≥n acad√©mica (Materia: Ingenier√≠a de Software 2)")
        print("   ‚Ä¢ Resumen general de pruebas de donaci√≥n")
        print("   ‚Ä¢ Gr√°fico de torta con resultados (colores tem√°ticos)")
        print("   ‚Ä¢ Gr√°fico de barras con duraci√≥n por tipo de prueba")
        print("   ‚Ä¢ Detalle de cada prueba ejecutada")
        print("   ‚Ä¢ Datos de donaciones procesadas")
        print("   ‚Ä¢ Pie de p√°gina acad√©mico")
        print()
        print("üé® Caracter√≠sticas visuales:")
        print("   ‚Ä¢ Esquema de colores rosa/rojo (tem√°tica donaciones)")
        print("   ‚Ä¢ Gr√°ficos 3D con efectos profesionales")
        print("   ‚Ä¢ Tablas con filas alternadas")
        print("   ‚Ä¢ Tipograf√≠a institucional")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error generando PDF de prueba: {e}")
        return False

if __name__ == "__main__":
    test_pdf_generation()
